/* tslint:disable */
/* eslint-disable */
/**
 * n.eko REST API
 * Next Gen Renderer.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BroadcastStatus } from '../models';
// @ts-ignore
import { ClipboardText } from '../models';
// @ts-ignore
import { ControlStatus } from '../models';
// @ts-ignore
import { ErrorMessage } from '../models';
// @ts-ignore
import { KeyboardMap } from '../models';
// @ts-ignore
import { KeyboardModifiers } from '../models';
// @ts-ignore
import { ScreenConfiguration } from '../models';
// @ts-ignore
import { Settings } from '../models';
/**
 * RoomApi - axios parameter creator
 * @export
 */
export const RoomApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary start broadcast
         * @param {BroadcastStatus} broadcastStatus 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        boradcastStart: async (broadcastStatus: BroadcastStatus, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'broadcastStatus' is not null or undefined
            assertParamExists('boradcastStart', 'broadcastStatus', broadcastStatus)
            const localVarPath = `/api/room/broadcast/start`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CookieAuth required

            // authentication TokenAuth required
            await setApiKeyToObject(localVarQueryParameter, "token", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(broadcastStatus, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary stop broadcast
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        boradcastStop: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/room/broadcast/stop`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CookieAuth required

            // authentication TokenAuth required
            await setApiKeyToObject(localVarQueryParameter, "token", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get broadcast status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        broadcastStatus: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/room/broadcast`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CookieAuth required

            // authentication TokenAuth required
            await setApiKeyToObject(localVarQueryParameter, "token", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get clipboard image content
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clipboardGetImage: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/room/clipboard/image.png`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CookieAuth required

            // authentication TokenAuth required
            await setApiKeyToObject(localVarQueryParameter, "token", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get clipboard rich-text or plain-text content
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clipboardGetText: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/room/clipboard`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CookieAuth required

            // authentication TokenAuth required
            await setApiKeyToObject(localVarQueryParameter, "token", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary set clipboard rich-text or plain-text content
         * @param {ClipboardText} clipboardText 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clipboardSetText: async (clipboardText: ClipboardText, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clipboardText' is not null or undefined
            assertParamExists('clipboardSetText', 'clipboardText', clipboardText)
            const localVarPath = `/api/room/clipboard`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CookieAuth required

            // authentication TokenAuth required
            await setApiKeyToObject(localVarQueryParameter, "token", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(clipboardText, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary give control
         * @param {string} sessionId session ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        controlGive: async (sessionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sessionId' is not null or undefined
            assertParamExists('controlGive', 'sessionId', sessionId)
            const localVarPath = `/api/room/control/give/{sessionId}`
                .replace(`{${"sessionId"}}`, encodeURIComponent(String(sessionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CookieAuth required

            // authentication TokenAuth required
            await setApiKeyToObject(localVarQueryParameter, "token", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary release control
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        controlRelease: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/room/control/release`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CookieAuth required

            // authentication TokenAuth required
            await setApiKeyToObject(localVarQueryParameter, "token", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary request control
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        controlRequest: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/room/control/request`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CookieAuth required

            // authentication TokenAuth required
            await setApiKeyToObject(localVarQueryParameter, "token", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary reset control
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        controlReset: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/room/control/reset`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CookieAuth required

            // authentication TokenAuth required
            await setApiKeyToObject(localVarQueryParameter, "token", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get control status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        controlStatus: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/room/control`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CookieAuth required

            // authentication TokenAuth required
            await setApiKeyToObject(localVarQueryParameter, "token", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary take control
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        controlTake: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/room/control/take`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CookieAuth required

            // authentication TokenAuth required
            await setApiKeyToObject(localVarQueryParameter, "token", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get keyboard map
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        keyboardMapGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/room/keyboard/map`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CookieAuth required

            // authentication TokenAuth required
            await setApiKeyToObject(localVarQueryParameter, "token", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary set keyboard map
         * @param {KeyboardMap} keyboardMap 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        keyboardMapSet: async (keyboardMap: KeyboardMap, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyboardMap' is not null or undefined
            assertParamExists('keyboardMapSet', 'keyboardMap', keyboardMap)
            const localVarPath = `/api/room/keyboard/map`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CookieAuth required

            // authentication TokenAuth required
            await setApiKeyToObject(localVarQueryParameter, "token", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(keyboardMap, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get keyboard modifiers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        keyboardModifiersGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/room/keyboard/modifiers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CookieAuth required

            // authentication TokenAuth required
            await setApiKeyToObject(localVarQueryParameter, "token", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary set keyboard modifiers
         * @param {KeyboardModifiers} keyboardModifiers 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        keyboardModifiersSet: async (keyboardModifiers: KeyboardModifiers, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'keyboardModifiers' is not null or undefined
            assertParamExists('keyboardModifiersSet', 'keyboardModifiers', keyboardModifiers)
            const localVarPath = `/api/room/keyboard/modifiers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CookieAuth required

            // authentication TokenAuth required
            await setApiKeyToObject(localVarQueryParameter, "token", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(keyboardModifiers, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get screencast image
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        screenCastImage: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/room/screen/cast.jpg`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CookieAuth required

            // authentication TokenAuth required
            await setApiKeyToObject(localVarQueryParameter, "token", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get current screen configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        screenConfiguration: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/room/screen`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CookieAuth required

            // authentication TokenAuth required
            await setApiKeyToObject(localVarQueryParameter, "token", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary change screen configuration
         * @param {ScreenConfiguration} screenConfiguration 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        screenConfigurationChange: async (screenConfiguration: ScreenConfiguration, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'screenConfiguration' is not null or undefined
            assertParamExists('screenConfigurationChange', 'screenConfiguration', screenConfiguration)
            const localVarPath = `/api/room/screen`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CookieAuth required

            // authentication TokenAuth required
            await setApiKeyToObject(localVarQueryParameter, "token", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(screenConfiguration, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get list of all available screen configurations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        screenConfigurationsList: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/room/screen/configurations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CookieAuth required

            // authentication TokenAuth required
            await setApiKeyToObject(localVarQueryParameter, "token", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get screenshot image
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        screenShotImage: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/room/screen/shot.jpg`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CookieAuth required

            // authentication TokenAuth required
            await setApiKeyToObject(localVarQueryParameter, "token", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/room/settings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CookieAuth required

            // authentication TokenAuth required
            await setApiKeyToObject(localVarQueryParameter, "token", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary set settings
         * @param {Settings} settings 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsSet: async (settings: Settings, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'settings' is not null or undefined
            assertParamExists('settingsSet', 'settings', settings)
            const localVarPath = `/api/room/settings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CookieAuth required

            // authentication TokenAuth required
            await setApiKeyToObject(localVarQueryParameter, "token", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(settings, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary upload file to a dialog
         * @param {Array<File>} [files] files to be uploaded
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadDialog: async (files?: Array<File>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/room/upload/dialog`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication CookieAuth required

            // authentication TokenAuth required
            await setApiKeyToObject(localVarQueryParameter, "token", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (files) {
                files.forEach((element) => {
                    localVarFormParams.append('files', element as any);
                })
            }

    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary close file chooser dialog
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadDialogClose: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/room/upload/dialog`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CookieAuth required

            // authentication TokenAuth required
            await setApiKeyToObject(localVarQueryParameter, "token", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary upload and drop file
         * @param {number} [x] X coordinate of drop
         * @param {number} [y] Y coordinate of drop
         * @param {Array<File>} [files] files to be uploaded
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadDrop: async (x?: number, y?: number, files?: Array<File>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/room/upload/drop`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication CookieAuth required

            // authentication TokenAuth required
            await setApiKeyToObject(localVarQueryParameter, "token", configuration)

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (x !== undefined) { 
                localVarFormParams.append('x', x as any);
            }
    
            if (y !== undefined) { 
                localVarFormParams.append('y', y as any);
            }
                if (files) {
                files.forEach((element) => {
                    localVarFormParams.append('files', element as any);
                })
            }

    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RoomApi - functional programming interface
 * @export
 */
export const RoomApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RoomApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary start broadcast
         * @param {BroadcastStatus} broadcastStatus 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async boradcastStart(broadcastStatus: BroadcastStatus, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.boradcastStart(broadcastStatus, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary stop broadcast
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async boradcastStop(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.boradcastStop(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary get broadcast status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async broadcastStatus(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BroadcastStatus>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.broadcastStatus(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary get clipboard image content
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clipboardGetImage(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.clipboardGetImage(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary get clipboard rich-text or plain-text content
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clipboardGetText(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClipboardText>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.clipboardGetText(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary set clipboard rich-text or plain-text content
         * @param {ClipboardText} clipboardText 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clipboardSetText(clipboardText: ClipboardText, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.clipboardSetText(clipboardText, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary give control
         * @param {string} sessionId session ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async controlGive(sessionId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.controlGive(sessionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary release control
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async controlRelease(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.controlRelease(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary request control
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async controlRequest(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.controlRequest(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary reset control
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async controlReset(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.controlReset(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary get control status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async controlStatus(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ControlStatus>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.controlStatus(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary take control
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async controlTake(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.controlTake(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary get keyboard map
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async keyboardMapGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KeyboardMap>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.keyboardMapGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary set keyboard map
         * @param {KeyboardMap} keyboardMap 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async keyboardMapSet(keyboardMap: KeyboardMap, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.keyboardMapSet(keyboardMap, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary get keyboard modifiers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async keyboardModifiersGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KeyboardModifiers>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.keyboardModifiersGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary set keyboard modifiers
         * @param {KeyboardModifiers} keyboardModifiers 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async keyboardModifiersSet(keyboardModifiers: KeyboardModifiers, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.keyboardModifiersSet(keyboardModifiers, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary get screencast image
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async screenCastImage(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.screenCastImage(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary get current screen configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async screenConfiguration(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScreenConfiguration>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.screenConfiguration(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary change screen configuration
         * @param {ScreenConfiguration} screenConfiguration 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async screenConfigurationChange(screenConfiguration: ScreenConfiguration, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScreenConfiguration>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.screenConfigurationChange(screenConfiguration, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary get list of all available screen configurations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async screenConfigurationsList(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ScreenConfiguration>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.screenConfigurationsList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary get screenshot image
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async screenShotImage(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.screenShotImage(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary get settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async settingsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Settings>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.settingsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary set settings
         * @param {Settings} settings 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async settingsSet(settings: Settings, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.settingsSet(settings, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary upload file to a dialog
         * @param {Array<File>} [files] files to be uploaded
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadDialog(files?: Array<File>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadDialog(files, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary close file chooser dialog
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadDialogClose(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadDialogClose(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary upload and drop file
         * @param {number} [x] X coordinate of drop
         * @param {number} [y] Y coordinate of drop
         * @param {Array<File>} [files] files to be uploaded
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadDrop(x?: number, y?: number, files?: Array<File>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadDrop(x, y, files, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RoomApi - factory interface
 * @export
 */
export const RoomApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RoomApiFp(configuration)
    return {
        /**
         * 
         * @summary start broadcast
         * @param {BroadcastStatus} broadcastStatus 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        boradcastStart(broadcastStatus: BroadcastStatus, options?: any): AxiosPromise<void> {
            return localVarFp.boradcastStart(broadcastStatus, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary stop broadcast
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        boradcastStop(options?: any): AxiosPromise<void> {
            return localVarFp.boradcastStop(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get broadcast status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        broadcastStatus(options?: any): AxiosPromise<BroadcastStatus> {
            return localVarFp.broadcastStatus(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get clipboard image content
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clipboardGetImage(options?: any): AxiosPromise<File> {
            return localVarFp.clipboardGetImage(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get clipboard rich-text or plain-text content
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clipboardGetText(options?: any): AxiosPromise<ClipboardText> {
            return localVarFp.clipboardGetText(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary set clipboard rich-text or plain-text content
         * @param {ClipboardText} clipboardText 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clipboardSetText(clipboardText: ClipboardText, options?: any): AxiosPromise<void> {
            return localVarFp.clipboardSetText(clipboardText, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary give control
         * @param {string} sessionId session ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        controlGive(sessionId: string, options?: any): AxiosPromise<void> {
            return localVarFp.controlGive(sessionId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary release control
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        controlRelease(options?: any): AxiosPromise<void> {
            return localVarFp.controlRelease(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary request control
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        controlRequest(options?: any): AxiosPromise<void> {
            return localVarFp.controlRequest(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary reset control
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        controlReset(options?: any): AxiosPromise<void> {
            return localVarFp.controlReset(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get control status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        controlStatus(options?: any): AxiosPromise<ControlStatus> {
            return localVarFp.controlStatus(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary take control
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        controlTake(options?: any): AxiosPromise<void> {
            return localVarFp.controlTake(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get keyboard map
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        keyboardMapGet(options?: any): AxiosPromise<KeyboardMap> {
            return localVarFp.keyboardMapGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary set keyboard map
         * @param {KeyboardMap} keyboardMap 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        keyboardMapSet(keyboardMap: KeyboardMap, options?: any): AxiosPromise<void> {
            return localVarFp.keyboardMapSet(keyboardMap, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get keyboard modifiers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        keyboardModifiersGet(options?: any): AxiosPromise<KeyboardModifiers> {
            return localVarFp.keyboardModifiersGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary set keyboard modifiers
         * @param {KeyboardModifiers} keyboardModifiers 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        keyboardModifiersSet(keyboardModifiers: KeyboardModifiers, options?: any): AxiosPromise<void> {
            return localVarFp.keyboardModifiersSet(keyboardModifiers, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get screencast image
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        screenCastImage(options?: any): AxiosPromise<File> {
            return localVarFp.screenCastImage(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get current screen configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        screenConfiguration(options?: any): AxiosPromise<ScreenConfiguration> {
            return localVarFp.screenConfiguration(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary change screen configuration
         * @param {ScreenConfiguration} screenConfiguration 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        screenConfigurationChange(screenConfiguration: ScreenConfiguration, options?: any): AxiosPromise<ScreenConfiguration> {
            return localVarFp.screenConfigurationChange(screenConfiguration, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get list of all available screen configurations
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        screenConfigurationsList(options?: any): AxiosPromise<Array<ScreenConfiguration>> {
            return localVarFp.screenConfigurationsList(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get screenshot image
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        screenShotImage(options?: any): AxiosPromise<File> {
            return localVarFp.screenShotImage(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsGet(options?: any): AxiosPromise<Settings> {
            return localVarFp.settingsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary set settings
         * @param {Settings} settings 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        settingsSet(settings: Settings, options?: any): AxiosPromise<void> {
            return localVarFp.settingsSet(settings, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary upload file to a dialog
         * @param {Array<File>} [files] files to be uploaded
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadDialog(files?: Array<File>, options?: any): AxiosPromise<void> {
            return localVarFp.uploadDialog(files, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary close file chooser dialog
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadDialogClose(options?: any): AxiosPromise<void> {
            return localVarFp.uploadDialogClose(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary upload and drop file
         * @param {number} [x] X coordinate of drop
         * @param {number} [y] Y coordinate of drop
         * @param {Array<File>} [files] files to be uploaded
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadDrop(x?: number, y?: number, files?: Array<File>, options?: any): AxiosPromise<void> {
            return localVarFp.uploadDrop(x, y, files, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RoomApi - object-oriented interface
 * @export
 * @class RoomApi
 * @extends {BaseAPI}
 */
export class RoomApi extends BaseAPI {
    /**
     * 
     * @summary start broadcast
     * @param {BroadcastStatus} broadcastStatus 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomApi
     */
    public boradcastStart(broadcastStatus: BroadcastStatus, options?: AxiosRequestConfig) {
        return RoomApiFp(this.configuration).boradcastStart(broadcastStatus, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary stop broadcast
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomApi
     */
    public boradcastStop(options?: AxiosRequestConfig) {
        return RoomApiFp(this.configuration).boradcastStop(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get broadcast status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomApi
     */
    public broadcastStatus(options?: AxiosRequestConfig) {
        return RoomApiFp(this.configuration).broadcastStatus(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get clipboard image content
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomApi
     */
    public clipboardGetImage(options?: AxiosRequestConfig) {
        return RoomApiFp(this.configuration).clipboardGetImage(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get clipboard rich-text or plain-text content
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomApi
     */
    public clipboardGetText(options?: AxiosRequestConfig) {
        return RoomApiFp(this.configuration).clipboardGetText(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary set clipboard rich-text or plain-text content
     * @param {ClipboardText} clipboardText 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomApi
     */
    public clipboardSetText(clipboardText: ClipboardText, options?: AxiosRequestConfig) {
        return RoomApiFp(this.configuration).clipboardSetText(clipboardText, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary give control
     * @param {string} sessionId session ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomApi
     */
    public controlGive(sessionId: string, options?: AxiosRequestConfig) {
        return RoomApiFp(this.configuration).controlGive(sessionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary release control
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomApi
     */
    public controlRelease(options?: AxiosRequestConfig) {
        return RoomApiFp(this.configuration).controlRelease(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary request control
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomApi
     */
    public controlRequest(options?: AxiosRequestConfig) {
        return RoomApiFp(this.configuration).controlRequest(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary reset control
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomApi
     */
    public controlReset(options?: AxiosRequestConfig) {
        return RoomApiFp(this.configuration).controlReset(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get control status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomApi
     */
    public controlStatus(options?: AxiosRequestConfig) {
        return RoomApiFp(this.configuration).controlStatus(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary take control
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomApi
     */
    public controlTake(options?: AxiosRequestConfig) {
        return RoomApiFp(this.configuration).controlTake(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get keyboard map
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomApi
     */
    public keyboardMapGet(options?: AxiosRequestConfig) {
        return RoomApiFp(this.configuration).keyboardMapGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary set keyboard map
     * @param {KeyboardMap} keyboardMap 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomApi
     */
    public keyboardMapSet(keyboardMap: KeyboardMap, options?: AxiosRequestConfig) {
        return RoomApiFp(this.configuration).keyboardMapSet(keyboardMap, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get keyboard modifiers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomApi
     */
    public keyboardModifiersGet(options?: AxiosRequestConfig) {
        return RoomApiFp(this.configuration).keyboardModifiersGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary set keyboard modifiers
     * @param {KeyboardModifiers} keyboardModifiers 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomApi
     */
    public keyboardModifiersSet(keyboardModifiers: KeyboardModifiers, options?: AxiosRequestConfig) {
        return RoomApiFp(this.configuration).keyboardModifiersSet(keyboardModifiers, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get screencast image
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomApi
     */
    public screenCastImage(options?: AxiosRequestConfig) {
        return RoomApiFp(this.configuration).screenCastImage(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get current screen configuration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomApi
     */
    public screenConfiguration(options?: AxiosRequestConfig) {
        return RoomApiFp(this.configuration).screenConfiguration(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary change screen configuration
     * @param {ScreenConfiguration} screenConfiguration 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomApi
     */
    public screenConfigurationChange(screenConfiguration: ScreenConfiguration, options?: AxiosRequestConfig) {
        return RoomApiFp(this.configuration).screenConfigurationChange(screenConfiguration, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get list of all available screen configurations
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomApi
     */
    public screenConfigurationsList(options?: AxiosRequestConfig) {
        return RoomApiFp(this.configuration).screenConfigurationsList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get screenshot image
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomApi
     */
    public screenShotImage(options?: AxiosRequestConfig) {
        return RoomApiFp(this.configuration).screenShotImage(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get settings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomApi
     */
    public settingsGet(options?: AxiosRequestConfig) {
        return RoomApiFp(this.configuration).settingsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary set settings
     * @param {Settings} settings 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomApi
     */
    public settingsSet(settings: Settings, options?: AxiosRequestConfig) {
        return RoomApiFp(this.configuration).settingsSet(settings, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary upload file to a dialog
     * @param {Array<File>} [files] files to be uploaded
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomApi
     */
    public uploadDialog(files?: Array<File>, options?: AxiosRequestConfig) {
        return RoomApiFp(this.configuration).uploadDialog(files, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary close file chooser dialog
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomApi
     */
    public uploadDialogClose(options?: AxiosRequestConfig) {
        return RoomApiFp(this.configuration).uploadDialogClose(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary upload and drop file
     * @param {number} [x] X coordinate of drop
     * @param {number} [y] Y coordinate of drop
     * @param {Array<File>} [files] files to be uploaded
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoomApi
     */
    public uploadDrop(x?: number, y?: number, files?: Array<File>, options?: AxiosRequestConfig) {
        return RoomApiFp(this.configuration).uploadDrop(x, y, files, options).then((request) => request(this.axios, this.basePath));
    }
}
